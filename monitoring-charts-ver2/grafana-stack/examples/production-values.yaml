# Production Configuration Example for Grafana Stack

# Grafana Configuration
grafana:
  enabled: true
  
  # Use strong admin credentials
  adminUser: admin
  adminPassword: "ChangeThisInProduction!"  # Use Kubernetes Secret in real production
  
  # Enable Ingress for external access
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - host: grafana.company.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: grafana-tls
        hosts:
          - grafana.company.com
  
  # Production resource limits
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  # Enable persistence with larger storage
  persistence:
    enabled: true
    storageClassName: "fast-ssd"
    size: 50Gi
  
  # Sidecar configuration
  sidecar:
    enabled: true
    datasources:
      enabled: true
      label: grafana_datasource
      labelValue: "1"
    dashboards:
      enabled: true
      label: grafana_dashboard
      labelValue: "1"

# Alertmanager Configuration
alertmanager:
  enabled: true
  
  # Production Alertmanager configuration
  config:
    global:
      smtp_smarthost: 'smtp.company.com:587'
      smtp_from: 'alerts@company.com'
      smtp_auth_username: 'alerts@company.com'
      smtp_auth_password: 'smtp-password'  # Use Secret in production
      slack_api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
    
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'default-receiver'
      routes:
        - match:
            severity: critical
          receiver: 'critical-alerts'
          group_wait: 10s
          repeat_interval: 1h
        - match:
            severity: warning
          receiver: 'warning-alerts'
          repeat_interval: 6h
    
    receivers:
      - name: 'default-receiver'
        slack_configs:
          - api_url: '{{ .Values.alertmanager.config.global.slack_api_url }}'
            channel: '#monitoring'
            title: 'Alert: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
            text: |
              {{ range .Alerts }}
              *Alert:* {{ .Annotations.summary }}
              *Description:* {{ .Annotations.description }}
              *Severity:* {{ .Labels.severity }}
              *Instance:* {{ .Labels.instance }}
              *Runbook:* {{ .Annotations.runbook_url }}
              {{ end }}
            send_resolved: true
      
      - name: 'critical-alerts'
        slack_configs:
          - api_url: '{{ .Values.alertmanager.config.global.slack_api_url }}'
            channel: '#critical-alerts'
            title: 'üö® CRITICAL: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
            text: |
              {{ range .Alerts }}
              *üö® CRITICAL ALERT üö®*
              *Alert:* {{ .Annotations.summary }}
              *Description:* {{ .Annotations.description }}
              *Instance:* {{ .Labels.instance }}
              *Runbook:* {{ .Annotations.runbook_url }}
              {{ end }}
            send_resolved: true
        email_configs:
          - to: 'oncall@company.com'
            subject: 'üö® CRITICAL: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
            body: |
              {{ range .Alerts }}
              CRITICAL ALERT
              
              Alert: {{ .Annotations.summary }}
              Description: {{ .Annotations.description }}
              Severity: {{ .Labels.severity }}
              Instance: {{ .Labels.instance }}
              Runbook: {{ .Annotations.runbook_url }}
              
              Time: {{ .StartsAt }}
              {{ end }}
      
      - name: 'warning-alerts'
        slack_configs:
          - api_url: '{{ .Values.alertmanager.config.global.slack_api_url }}'
            channel: '#warnings'
            title: '‚ö†Ô∏è Warning: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
            text: |
              {{ range .Alerts }}
              *‚ö†Ô∏è Warning*
              *Alert:* {{ .Annotations.summary }}
              *Description:* {{ .Annotations.description }}
              *Instance:* {{ .Labels.instance }}
              {{ end }}
            send_resolved: true
    
    inhibit_rules:
      - source_match:
          severity: 'critical'
        target_match:
          severity: 'warning'
        equal: ['alertname', 'instance']
      - source_match:
          alertname: 'NodeDown'
        target_match_re:
          alertname: '.*'
        equal: ['instance']
  
  # Production resource limits
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  
  # Enable persistence
  persistence:
    enabled: true
    storageClassName: "fast-ssd"
    size: 10Gi

# Global settings
global:
  namespace: observability

# Service Monitor
serviceMonitor:
  enabled: true
  namespace: observability
  interval: 15s
  scrapeTimeout: 10s

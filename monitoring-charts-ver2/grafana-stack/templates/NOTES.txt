1. Get the Grafana URL by running these commands:
{{- if .Values.grafana.ingress.enabled }}
{{- range $host := .Values.grafana.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.grafana.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.grafana.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Values.global.namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "grafana-stack.fullname" . }}-grafana)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Values.global.namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.grafana.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Values.global.namespace }} svc -w {{ include "grafana-stack.fullname" . }}-grafana'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Values.global.namespace }} {{ include "grafana-stack.fullname" . }}-grafana --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.grafana.service.port }}
{{- else if contains "ClusterIP" .Values.grafana.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Values.global.namespace }} -l "app.kubernetes.io/name={{ include "grafana-stack.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=grafana" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Values.global.namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:3000 to use your application"
  kubectl --namespace {{ .Values.global.namespace }} port-forward $POD_NAME 3000:$CONTAINER_PORT
{{- end }}

2. Login to Grafana with:
   Username: {{ .Values.grafana.adminUser }}
   Password: {{ .Values.grafana.adminPassword }}

{{- if .Values.alertmanager.enabled }}

3. Get the Alertmanager URL by running these commands:
{{- if contains "NodePort" .Values.alertmanager.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Values.global.namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "grafana-stack.fullname" . }}-alertmanager)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Values.global.namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.alertmanager.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Values.global.namespace }} svc -w {{ include "grafana-stack.fullname" . }}-alertmanager'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Values.global.namespace }} {{ include "grafana-stack.fullname" . }}-alertmanager --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.alertmanager.service.port }}
{{- else if contains "ClusterIP" .Values.alertmanager.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Values.global.namespace }} -l "app.kubernetes.io/name={{ include "grafana-stack.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=alertmanager" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Values.global.namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:9093 to use Alertmanager"
  kubectl --namespace {{ .Values.global.namespace }} port-forward $POD_NAME 9093:$CONTAINER_PORT
{{- end }}
{{- end }}

4. Important Notes:
   - Grafana sidecar is enabled to automatically discover datasources and dashboards from ConfigMaps/Secrets
   - Look for ConfigMaps with label "grafana_datasource=1" for datasources
   - Look for ConfigMaps with label "grafana_dashboard=1" for dashboards
   - Alertmanager is configured to send alerts to Slack (configure webhook URL in values.yaml)
   - Both services are accessible within the cluster at:
     * Grafana: {{ include "grafana-stack.fullname" . }}-grafana.{{ .Values.global.namespace }}.svc.cluster.local:3000
     * Alertmanager: {{ include "grafana-stack.fullname" . }}-alertmanager.{{ .Values.global.namespace }}.svc.cluster.local:9093

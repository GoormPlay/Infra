apiVersion: apps/v1
kind: Deployment
metadata:
  name: enhanced-test-app
  namespace: observability
  labels:
    app: enhanced-test-app
    version: v2.0
spec:
  replicas: 2
  selector:
    matchLabels:
      app: enhanced-test-app
  template:
    metadata:
      labels:
        app: enhanced-test-app
        version: v2.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: enhanced-test-app
        image: python:3.9-slim
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: SERVICE_NAME
          value: "enhanced-test-app"
        - name: SERVICE_VERSION
          value: "v2.0"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://grafana-stack-otel-collector.observability.svc.cluster.local:4317"
        - name: OTEL_SERVICE_NAME
          value: "enhanced-test-app"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=enhanced-test-app,service.version=v2.0"
        command:
        - /bin/bash
        - -c
        - |
          pip install flask prometheus_client opentelemetry-api opentelemetry-sdk opentelemetry-instrumentation-flask opentelemetry-exporter-otlp requests structlog
          cat > /enhanced_app.py << 'EOF'
          import os
          import time
          import random
          import json
          import logging
          import structlog
          import sys
          from flask import Flask, request, jsonify
          from prometheus_client import Counter, Histogram, Gauge, generate_latest, CONTENT_TYPE_LATEST
          from opentelemetry import trace
          from opentelemetry.sdk.trace import TracerProvider
          from opentelemetry.sdk.trace.export import BatchSpanProcessor
          from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
          from opentelemetry.instrumentation.flask import FlaskInstrumentor
          from opentelemetry.sdk.resources import Resource
          import threading
          import requests

          # Configure structured logging to stdout
          structlog.configure(
              processors=[
                  structlog.stdlib.filter_by_level,
                  structlog.stdlib.add_logger_name,
                  structlog.stdlib.add_log_level,
                  structlog.stdlib.PositionalArgumentsFormatter(),
                  structlog.processors.TimeStamper(fmt="iso"),
                  structlog.processors.StackInfoRenderer(),
                  structlog.processors.format_exc_info,
                  structlog.processors.JSONRenderer()
              ],
              context_class=dict,
              logger_factory=structlog.stdlib.LoggerFactory(),
              wrapper_class=structlog.stdlib.BoundLogger,
              cache_logger_on_first_use=True,
          )

          # Set up root logger to output to stdout
          logging.basicConfig(
              format="%(message)s",
              stream=sys.stdout,
              level=logging.INFO,
          )

          logger = structlog.get_logger()

          # OpenTelemetry setup
          resource = Resource.create({
              "service.name": os.getenv("OTEL_SERVICE_NAME", "enhanced-test-app"),
              "service.version": os.getenv("SERVICE_VERSION", "v2.0"),
          })

          trace.set_tracer_provider(TracerProvider(resource=resource))
          tracer = trace.get_tracer(__name__)

          # OTLP exporter setup
          otlp_exporter = OTLPSpanExporter(
              endpoint=os.getenv("OTEL_EXPORTER_OTLP_ENDPOINT", "http://grafana-stack-otel-collector.observability.svc.cluster.local:4317"),
              insecure=True
          )
          span_processor = BatchSpanProcessor(otlp_exporter)
          trace.get_tracer_provider().add_span_processor(span_processor)

          app = Flask(__name__)
          FlaskInstrumentor().instrument_app(app)

          # Prometheus metrics
          REQUEST_COUNT = Counter('http_requests_total', 'Total HTTP requests', ['method', 'endpoint', 'status_code', 'service'])
          REQUEST_DURATION = Histogram('http_request_duration_seconds', 'HTTP request duration', ['method', 'endpoint', 'service'])
          ERROR_COUNT = Counter('application_errors_total', 'Total application errors', ['error_type', 'service'])
          BUSINESS_METRICS = Counter('business_events_total', 'Business events', ['event_type', 'service'])

          def get_trace_context():
              """Extract trace context for logging"""
              span = trace.get_current_span()
              if span and span.get_span_context().trace_id != 0:
                  return {
                      "trace_id": format(span.get_span_context().trace_id, '032x'),
                      "span_id": format(span.get_span_context().span_id, '016x')
                  }
              return {"trace_id": None, "span_id": None}

          @app.route('/health')
          def health():
              with tracer.start_as_current_span("health_check") as span:
                  span.set_attribute("http.method", "GET")
                  span.set_attribute("http.route", "/health")
                  span.set_attribute("service.name", "enhanced-test-app")
                  
                  trace_ctx = get_trace_context()
                  REQUEST_COUNT.labels(method='GET', endpoint='/health', status_code='200', service='enhanced-test-app').inc()
                  
                  logger.info("Health check requested", 
                            service="enhanced-test-app",
                            level="info",
                            endpoint="/health",
                            method="GET",
                            status_code=200,
                            **trace_ctx)
                  
                  return jsonify({"status": "healthy", "service": "enhanced-test-app"})

          @app.route('/api/users')
          def get_users():
              with tracer.start_as_current_span("get_users") as span:
                  start_time = time.time()
                  
                  # Simulate processing time
                  processing_time = random.uniform(0.1, 0.8)
                  time.sleep(processing_time)
                  
                  span.set_attribute("http.method", "GET")
                  span.set_attribute("http.route", "/api/users")
                  span.set_attribute("user.count", 150)
                  span.set_attribute("service.name", "enhanced-test-app")
                  
                  trace_ctx = get_trace_context()
                  
                  # Simulate occasional errors
                  if random.random() < 0.05:  # 5% error rate
                      ERROR_COUNT.labels(error_type='database_timeout', service='enhanced-test-app').inc()
                      REQUEST_COUNT.labels(method='GET', endpoint='/api/users', status_code='500', service='enhanced-test-app').inc()
                      
                      logger.error("Database timeout occurred", 
                                 service="enhanced-test-app",
                                 level="error",
                                 endpoint="/api/users",
                                 method="GET",
                                 status_code=500,
                                 error_type="database_timeout",
                                 processing_time=processing_time,
                                 **trace_ctx)
                      
                      span.set_status(trace.Status(trace.StatusCode.ERROR, "Database timeout"))
                      span.set_attribute("error", True)
                      span.set_attribute("error.type", "database_timeout")
                      return jsonify({"error": "Database timeout"}), 500
                  
                  REQUEST_COUNT.labels(method='GET', endpoint='/api/users', status_code='200', service='enhanced-test-app').inc()
                  REQUEST_DURATION.labels(method='GET', endpoint='/api/users', service='enhanced-test-app').observe(time.time() - start_time)
                  BUSINESS_METRICS.labels(event_type='user_list_requested', service='enhanced-test-app').inc()
                  
                  logger.info("Users retrieved successfully", 
                            service="enhanced-test-app",
                            level="info",
                            endpoint="/api/users",
                            method="GET",
                            status_code=200,
                            user_count=150,
                            processing_time=processing_time,
                            **trace_ctx)
                  
                  return jsonify({"users": [f"user_{i}" for i in range(150)], "count": 150})

          @app.route('/api/orders', methods=['POST'])
          def create_order():
              with tracer.start_as_current_span("create_order") as span:
                  start_time = time.time()
                  
                  # Simulate complex processing
                  processing_time = random.uniform(0.2, 1.5)
                  time.sleep(processing_time)
                  
                  span.set_attribute("http.method", "POST")
                  span.set_attribute("http.route", "/api/orders")
                  span.set_attribute("service.name", "enhanced-test-app")
                  
                  trace_ctx = get_trace_context()
                  order_id = f"order_{random.randint(1000, 9999)}"
                  span.set_attribute("order.id", order_id)
                  
                  # Simulate validation errors
                  if random.random() < 0.08:  # 8% validation error rate
                      ERROR_COUNT.labels(error_type='validation_error', service='enhanced-test-app').inc()
                      REQUEST_COUNT.labels(method='POST', endpoint='/api/orders', status_code='400', service='enhanced-test-app').inc()
                      
                      logger.warning("Order validation failed", 
                                   service="enhanced-test-app",
                                   level="warning",
                                   endpoint="/api/orders",
                                   method="POST",
                                   status_code=400,
                                   order_id=order_id,
                                   error_type="validation_error",
                                   **trace_ctx)
                      
                      span.set_status(trace.Status(trace.StatusCode.ERROR, "Validation failed"))
                      span.set_attribute("error", True)
                      span.set_attribute("error.type", "validation_error")
                      return jsonify({"error": "Invalid order data"}), 400
                  
                  # Simulate server errors
                  if random.random() < 0.02:  # 2% server error rate
                      ERROR_COUNT.labels(error_type='payment_service_error', service='enhanced-test-app').inc()
                      REQUEST_COUNT.labels(method='POST', endpoint='/api/orders', status_code='500', service='enhanced-test-app').inc()
                      
                      logger.error("Payment service error", 
                                 service="enhanced-test-app",
                                 level="error",
                                 endpoint="/api/orders",
                                 method="POST",
                                 status_code=500,
                                 order_id=order_id,
                                 error_type="payment_service_error",
                                 **trace_ctx)
                      
                      span.set_status(trace.Status(trace.StatusCode.ERROR, "Payment service unavailable"))
                      span.set_attribute("error", True)
                      span.set_attribute("error.type", "payment_service_error")
                      return jsonify({"error": "Payment service unavailable"}), 500
                  
                  REQUEST_COUNT.labels(method='POST', endpoint='/api/orders', status_code='201', service='enhanced-test-app').inc()
                  REQUEST_DURATION.labels(method='POST', endpoint='/api/orders', service='enhanced-test-app').observe(time.time() - start_time)
                  BUSINESS_METRICS.labels(event_type='order_created', service='enhanced-test-app').inc()
                  
                  logger.info("Order created successfully", 
                            service="enhanced-test-app",
                            level="info",
                            endpoint="/api/orders",
                            method="POST",
                            status_code=201,
                            order_id=order_id,
                            processing_time=processing_time,
                            **trace_ctx)
                  
                  return jsonify({"order_id": order_id, "status": "created"}), 201

          @app.route('/api/slow')
          def slow_endpoint():
              with tracer.start_as_current_span("slow_operation") as span:
                  start_time = time.time()
                  
                  # Intentionally slow operation
                  processing_time = random.uniform(2.0, 5.0)
                  time.sleep(processing_time)
                  
                  span.set_attribute("http.method", "GET")
                  span.set_attribute("http.route", "/api/slow")
                  span.set_attribute("operation.type", "heavy_computation")
                  span.set_attribute("service.name", "enhanced-test-app")
                  
                  trace_ctx = get_trace_context()
                  
                  REQUEST_COUNT.labels(method='GET', endpoint='/api/slow', status_code='200', service='enhanced-test-app').inc()
                  REQUEST_DURATION.labels(method='GET', endpoint='/api/slow', service='enhanced-test-app').observe(time.time() - start_time)
                  
                  logger.warning("Slow operation completed", 
                               service="enhanced-test-app",
                               level="warning",
                               endpoint="/api/slow",
                               method="GET",
                               status_code=200,
                               processing_time=processing_time,
                               operation_type="heavy_computation",
                               **trace_ctx)
                  
                  return jsonify({"result": "completed", "processing_time": processing_time})

          @app.route('/metrics')
          def metrics():
              return generate_latest(), 200, {'Content-Type': CONTENT_TYPE_LATEST}

          # Background traffic generator
          def generate_traffic():
              endpoints = [
                  ('GET', 'http://localhost:8080/health'),
                  ('GET', 'http://localhost:8080/api/users'),
                  ('POST', 'http://localhost:8080/api/orders'),
                  ('GET', 'http://localhost:8080/api/slow'),
              ]
              
              while True:
                  try:
                      method, url = random.choice(endpoints)
                      if method == 'POST':
                          requests.post(url, json={"item": "test", "quantity": 1}, timeout=10)
                      else:
                          requests.get(url, timeout=10)
                      time.sleep(random.uniform(1, 5))
                  except Exception as e:
                      logger.error("Traffic generation error", 
                                 service="enhanced-test-app",
                                 level="error",
                                 error=str(e))
                      time.sleep(5)

          if __name__ == '__main__':
              # Start background traffic generator
              traffic_thread = threading.Thread(target=generate_traffic, daemon=True)
              traffic_thread.start()
              
              logger.info("Enhanced test application starting", 
                        service="enhanced-test-app", 
                        version="v2.0",
                        level="info")
              app.run(host='0.0.0.0', port=8080, debug=False)
          EOF
          
          python /enhanced_app.py
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: enhanced-test-app
  namespace: observability
  labels:
    app: enhanced-test-app
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: enhanced-test-app
  ports:
  - name: http
    port: 8080
    targetPort: 8080
